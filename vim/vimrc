set nocompatible
set tabstop=2 softtabstop=2 expandtab shiftwidth=2 smarttab

" Enable syntax highlighting.
syntax on

" File-type highlighting and configuration.
" Run :filetype (without args) to see what you may have
" to turn on yourself, or just set them all to be sure.
filetype on
filetype plugin on
filetype indent on

set autoindent smartindent
set showmode

" Show line numbers.
set number

" Do not wrap lines.
set nowrap

" Show matching brackets.
set showmatch

" Always show status line.
set laststatus=2

" Mouse in all modes
set mouse=a

set history=1000
set matchtime=0
" The “Press ENTER or type command to continue” prompt is jarring and usually unnecessary. You can shorten command-line text and other info tokens with.
set shortmess=atI

" show trailing whitespace
set list listchars=trail:·

" Now in the bottom right corner of the status line there will be something like: 529, 35 68%, representing line 529, column 35, about 68% of the way to the end.
set ruler
set showcmd

" A running gvim will always have a window title, but when vim is run within an xterm, by default it inherits the terminal’s current title.
set title

" Search options
" Highlight search terms
set hlsearch
set incsearch
set ignorecase
set smartcase

" Blink if there is an error
set visualbell
set noerrorbells
set printoptions=paper:letter

" Make backspace delete lots of things
set backspace=indent,eol,start

set undofile
set undodir=~/.vim/undodir

set backspace=2   " Backspace deletes like most programs in insert mode

set t_Co=256
set cursorline

set scrolloff=15

" speed up scrolling
" set lazyredraw
set ttyfast
set regexpengine=2
set nofoldenable

set wildmenu

" Enable TOC window auto-fit
let g:vim_markdown_toc_autofit = 1
let g:vim_markdown_folding_disabled = 1

if exists('+colorcolumn')
 let &colorcolumn="80"
 highlight ColorColumn ctermbg=236
endif

" Prevent Ctrlp from searching node modules and git
let g:ctrlp_custom_ignore = '\v[\/](node_modules|dist)|(\.(swp|git))$'
let g:ctrlp_show_hidden = 1

" Use nicer highlight colors
hi Search ctermfg=black ctermbg=228
set cursorline
hi CursorLine ctermbg=237
hi CursorLineNR ctermfg=39
hi CursorColumn ctermbg=238

highlight GitGutterAdd    ctermfg=2
highlight GitGutterChange ctermfg=3
highlight GitGutterDelete ctermfg=1
let g:gitgutter_map_keys = 0

autocmd BufNewFile,BufRead *.ts setlocal filetype=typescript

" set filetypes as typescript.tsx
autocmd BufNewFile,BufRead *.tsx set filetype=typescript.tsx

" let g:fzf_action = {
"   \ 'ctrl-h': 'split',
"   \ 'ctrl-v': 'vsplit' }

let g:ackprg = 'ag --vimgrep'

if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor\ --path-to-ignore\ $HOME/.agignore

  " Use ag in CtrlP for listing files. Lightning fast and respects
  "     .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  " bind K to grep word under cursor
  " nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

  " bind , (backward slash) to grep shortcut
  command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!

  nnoremap , :Ag<SPACE>
endif

source $HOME/prj/source/dotfiles/vim/lcars.vim
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline_theme = 'lcars'

let g:airline_powerline_fonts = 1
" This allows buffers to be hidden if you've modified a buffer.
" This is almost a must if you wish to use buffers in this way.
set hidden

" autocmd FileType typescript,typescript.tsx nmap <buffer> <Leader>o : <C-u>echo tsuquyomi#hint()<CR>

set omnifunc=syntaxcomplete#Complete
set completeopt=noinsert,menuone,menu

" Move focus to newly created splits
set splitbelow
set splitright

if has('macunix')
  set clipboard=unnamed
else
  set clipboard=unnamedplus
endif

command CopyFilename let @* = expand("%")

let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.tsx, *.jsx'
" todo create ctrlsf mappings and config settings
let g:ctrlsf_auto_close = {
      \ "normal" : 0,
      \ "compact": 0
      \}
let g:ctrlsf_default_view_mode = 'compact'

" Use nicer hl colors
" hi Search ctermbg=226 ctermfg=0
hi Search cterm=NONE ctermfg=black ctermbg=yellow

" tab symbol
set listchars=tab:⇢\ ,nbsp:⎵
highlight SpecialKey ctermbg=none ctermfg=238

" C-specific settings
au! BufRead,BufNewFile */*.cpp setlocal shiftwidth=2 tabstop=2 softtabstop=2 noexpandtab
au! BufRead,BufNewFile */*.hpp setlocal shiftwidth=2 tabstop=2 softtabstop=2 noexpandtab
au! BufRead,BufNewFile */*.h setlocal shiftwidth=2 tabstop=2 softtabstop=2 noexpandtab
au! BufRead,BufNewFile */*.go setlocal shiftwidth=2 tabstop=2 softtabstop=2 noexpandtab

" autocmd BufWritePost *.rb SyntasticCheck rubocop
autocmd BufRead,BufNewFile *.zpl set filetype=zimpl

let test#strategy = "vimux"

let g:ranger_map_keys = 0

set autoread
" see https://unix.stackexchange.com/a/383044
" Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

source $HOME/prj/source/dotfiles/vim/mappings.vim
source $HOME/prj/source/dotfiles/vim/nerd-tree.vim
source $HOME/prj/source/dotfiles/vim/coc.vim
source $HOME/prj/source/dotfiles/vim/plugins.vim

colorscheme afterglow

highlight CursorLine ctermbg=235
